name: test-cache-extended-attributes

on:
  workflow_dispatch: # manually triggered
    inputs:
      #fetch_url:
      #  description: Optional test download
      #  default: 'https://download.mozilla.org/?product=firefox-esr-latest-ssl&os=osx&lang=en-GB'
      #  required: true
      uninstall_gtar:
        description: uninstall gtar - whether to uninstall GNU tar, so actions/cache uses macOS builtin BSD tar
        required: true
        default: 'False'
        type: choice
        options:
          - 'False'
          - 'True'
      #verbose:
      #  description: verbose output
      #  required: true
      #  default: 'True'
      #  type: choice
      #  options:
      #  - 'False'
      #  - 'True'

jobs:
  test-cache:
    runs-on: macos-latest
    env:
      cache-name: 'cache-test'
      testfile: 'autopkg-illustration.jpg'
      testfile-url: 'https://github.com/codeskipper/gh-action-cache-test/raw/719e7246c019e14204a5078cbdcd369e5b35f3fc/testfile/autopkg-illustration.jpg'
      test-attr-key: 'com.github.autopkg.test-cache'
      test-attr-val: 'generated at Bing.com - using: a machine with a conveyer belt and apple mac software package, icons'
    steps:
      - name: init
        env:
          uninstall_gtar: ${{ github.event.inputs.uninstall_gtar }}
        run: |
          echo "tar in search path at: $(which tar)"
          echo "tar version: $(tar --version)"
          echo "gtar in search path at: $(which gtar)"
          echo "gtar version: $(gtar --version)"

          if [[ "${{ env.uninstall_gtar }}" == "True" ]]; then
            echo "Uninstalling Homebrew GNU Tar as directed by workflow input"
            brew remove 'gnu-tar'
            if [[ $? != 0 ]]; then
              echo "failed uninstalling Homebrew GNU Tar"
              exit 1
            fi
          else
            echo "NOT Uninstalling Homebrew GNU Tar as directed by workflow input"
          fi

          mkdir -p ~/${{ env.cache-name }}

      - name: cache
        uses: actions/cache@v3
        with:
          path: ~/${{ env.cache-name }}
          key: ${{ runner.os }}-${{ env.cache-name }}
          restore-keys: ${{ runner.os }}-${{ env.cache-name }}

      - name: show cache
        run: |
          ls -@alh ~/${{ env.cache-name }}

      - name: process test file
        run: |
          #result=''
          #if [[ -e "~/${{ env.cache-name }}/${{ env.testfile }}" ]]; then
          result=$( xattr -p ${{ env.test-attr-key }} ${{ env.cache-name }}/${{ env.testfile }} )
          if [[ $? == 0 ]]; then
            echo "Found testfile: [${{ env.testfile }}] test-attribute: [${{ env.test-attr-key }}] value: [$result]"
          else
            echo "test file [~/${{ env.cache-name }}/${{ env.testfile }}] NOT found"
          fi
          if [[ ! $result == "${{ env.test-attr-val }}" ]]; then
            echo "Test attribute did NOT match test value - downloading test file"
            cd ~/${{ env.cache-name }}
            curl --remote-name --location ${{ env.testfile-url }}
            xattr -w ${{ env.test-attr-key }} "${{ env.test-attr-val }}" ${{ env.testfile }}
            echo "Checking test extended attribute is now set on downloaded testfile"
            ls -@alh ${{ env.testfile }}
          fi
